from flask import Flask, request, jsonify
from PIL import Image
import numpy as np
import tensorflow as tf  # Or PyTorch, depending on your model
import os

app = Flask(__name__)
UPLOAD_FOLDER = 'uploads'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Load the pre-trained model
model = tf.keras.models.load_model('path_to_your_model.h5')  # Update with your model's path

# Ensure upload folder exists
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({"error": "No file provided"}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "No file selected"}), 400

    file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
    file.save(file_path)

    # Process the image
    try:
        result = analyze_image(file_path)
        os.remove(file_path)  # Clean up the uploaded file
        return jsonify({"result": result})
    except Exception as e:
        os.remove(file_path)
        return jsonify({"error": str(e)}), 500

def analyze_image(image_path):
    # Load and preprocess the image
    image = Image.open(image_path).convert('RGB')
    image = image.resize((224, 224))  # Resize to match model input
    image_array = np.array(image) / 255.0  # Normalize to [0, 1]
    image_array = np.expand_dims(image_array, axis=0)  # Add batch dimension

    # Predict using the model
    predictions = model.predict(image_array)
    predicted_classes = decode_predictions(predictions)
    return predicted_classes

def decode_predictions(predictions):
    # Convert model output to meaningful labels
    labels = ["E. coli", "S. aureus", "P. aeruginosa", "Fungi"]  # Example labels
    predicted_index = np.argmax(predictions, axis=1)[0]
    return {"colony_type": labels[predicted_index], "confidence": float(np.max(predictions))}

if __name__ == '__main__':
    app.run(debug=True)



